[{"content":"How To Use RegEx library:\n To import  import re  compile the pattern  obj = re.compile(r\u0026#39;pattern\u0026#39;) # group in pattern can be represnted by \u0026#39;()\u0026#39; and anything in betwwen these paraentheses will create a group with the whole pattern being a pattern  # e.g. (451)-(1234)  search the string  search_obj = obj.search(string to be searched)#first occurence search_obj = obj.findall(string to be searched)#All occurences  to get the first match  search_obj.group() # if integer is passed in the group method then it gives the interger number group match  to get all matches  search_obj.find_all() Table of patterns \u0026#39;\\d\u0026#39; -\u0026gt; Digit \u0026#39;?\u0026#39; -\u0026gt; matches a group(or element) one or zero time \u0026#39;*\u0026#39; -\u0026gt; matches a group(or element) zero or more time \u0026#39;+\u0026#39; -\u0026gt; matches a group(or element) one or more time \u0026#39;\\w\u0026#39; -\u0026gt; word character \u0026#39;\\s\u0026#39; -\u0026gt; space characters \u0026#39;\\D\u0026#39; -\u0026gt; Not digit \u0026#39;\\W\u0026#39; -\u0026gt; Not Word \u0026#39;\\S\u0026#39; -\u0026gt; Not space \u0026#39;{number of occurence}\u0026#39; -\u0026gt; Is used to get desired number of repetetions \u0026#39;{min, max}\u0026#39; -\u0026gt; Number of occurence in between(including) min and max with greedy(first occurence of maximum) matching \u0026#39;{min, max}?\u0026#39; -\u0026gt; Number of occurence in between(including) min and max with non-greedy(first occurence of minimum) matching \u0026#39;[anything]\u0026#39; -\u0026gt; equivalent to \u0026#39;(a|n|y|t|h|i|n|g)\u0026#39; group containing individual letters \u0026#39;^[anything]\u0026#39; -\u0026gt; equivalent to \u0026#39;(a|n|y|t|h|i|n|g)\u0026#39; group except these individual letters ","permalink":"know-one-1.github.io/posts/pythonregex/","summary":"How To Use RegEx library:\n To import  import re  compile the pattern  obj = re.compile(r\u0026#39;pattern\u0026#39;) # group in pattern can be represnted by \u0026#39;()\u0026#39; and anything in betwwen these paraentheses will create a group with the whole pattern being a pattern  # e.g. (451)-(1234)  search the string  search_obj = obj.search(string to be searched)#first occurence search_obj = obj.findall(string to be searched)#All occurences  to get the first match  search_obj.","title":"PythonRegex"},{"content":"About Me know-one is no one but Prajjwal Mishra, know_one is graduating in 2021 from Department of Computational and Data Science, Indian Institute of Science, Banglore with Masters degree.\nknow_one is the guy who loves visiting mountains at cold places and love to hear the music of rivers flowing downhill (have you ever tried it You should). Trying new things makes him happy and here he is creating a new website for himself to show-case something [ still thinking (: ] \u0026hellip;\nI have used various frameworks and I do love some of the frameworks and languages:\n Software Devlopement I use for competetive coding and developement purpose.\n Machine Learning I like to use for all the deep learning related works.\n Parallel Computing I have worked with MPI frameworks.\n","permalink":"know-one-1.github.io/about/","summary":"About","title":"About"}]